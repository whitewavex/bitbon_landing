$(document).ready(function(){$(".dialog").click(function(e){e.preventDefault(),$(".overlay").fadeIn(300,function(){$("#modal-form").css({display:"block"}).animate({opacity:1},300)})}),$(".modal-form__close").click(function(){$("#modal-form").animate({opacity:0},300,function(){$("#modal-form").css({display:"none"}),$(".overlay").fadeOut(300)})}),$(".feedback").click(function(e){e.preventDefault(),$(".overlay").fadeIn(300,function(){$("#feedback").css({display:"block"}).animate({opacity:1},300)})}),$(".modal-form__close").click(function(){$("#feedback").animate({opacity:0},300,function(){$("#feedback").css({display:"none"}),$(".overlay").fadeOut(300)})}),void 0==window.jQuery&&document.write("<script src='//solomon007.e-autopay.com/js/jq.js' type='text/javascript'><\/script>"),window.onload=function(){"solomon007.e-autopay.com"!==window.location.hostname&&(document.getElementById("order_page_referer").value=document.referrer),jQuery(function(){jQuery(".ea_privatehouse").change(function(){jQuery(this).attr("checked")?(jQuery("#ea_korpus_kvartira").hide(),jQuery("#special_address").val("Ул. "+jQuery(".ea_street").val()+", Д. "+jQuery(".ea_dom").val())):(jQuery("#ea_korpus_kvartira").show(),jQuery("#special_address").val("Ул. "+jQuery(".ea_street").val()+", Д. "+jQuery(".ea_dom").val()+", Корп. "+jQuery(".ea_korpus").val()+", Кв. "+jQuery(".ea_kvartira").val()))}),jQuery(".ea_street,.ea_dom,.ea_korpus,.ea_kvartira").change(function(){jQuery(".ea_privatehouse").attr("checked")?jQuery("#special_address").val("Ул. "+jQuery(".ea_street").val()+", Д. "+jQuery(".ea_dom").val()):""!=jQuery(".ea_korpus").val()?jQuery("#special_address").val("Ул. "+jQuery(".ea_street").val()+", Д. "+jQuery(".ea_dom").val()+", Корп. "+jQuery(".ea_korpus").val()+", Кв. "+jQuery(".ea_kvartira").val()):jQuery("#special_address").val("Ул. "+jQuery(".ea_street").val()+", Д. "+jQuery(".ea_dom").val()+", Кв. "+jQuery(".ea_kvartira").val())})})}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
